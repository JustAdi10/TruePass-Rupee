{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hardik\\\\Documents\\\\Nft\\\\src\\\\pages\\\\CreateNFT.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Typography, Box, TextField, Button, Paper, Grid, Alert, Snackbar, CircularProgress, InputAdornment } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useNFTs } from '../context/NFTContext';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateNFT = () => {\n  _s();\n  const {\n    addNFT\n  } = useNFTs();\n  const {\n    user\n  } = useAuth();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    price: '',\n    image: null\n  });\n  const [previewUrl, setPreviewUrl] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleImageChange = e => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      setFormData(prev => ({\n        ...prev,\n        image: file\n      }));\n\n      // Create a preview URL for the image\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreviewUrl(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      // In a real application, you would upload the image to a storage service\n      // Here we're just creating a data URL to represent the image\n      const imageUrl = previewUrl || 'https://via.placeholder.com/400x400/3f51b5/ffffff';\n\n      // Add the NFT to the context\n      addNFT({\n        title: formData.name,\n        description: formData.description,\n        price: `${formData.price} ETH`,\n        image: imageUrl,\n        creator: (user === null || user === void 0 ? void 0 : user.email) || 'anonymous',\n        isVerified: true\n      });\n\n      // Show success notification\n      setNotification({\n        open: true,\n        message: 'NFT created successfully!',\n        severity: 'success'\n      });\n\n      // Reset form\n      setFormData({\n        name: '',\n        description: '',\n        price: '',\n        image: null\n      });\n      setPreviewUrl(null);\n\n      // Redirect to marketplace after a short delay\n      setTimeout(() => {\n        navigate('/marketplace');\n      }, 2000);\n    } catch (error) {\n      console.error('Error creating NFT:', error);\n      setNotification({\n        open: true,\n        message: 'Failed to create NFT. Please try again.',\n        severity: 'error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleCloseNotification = () => {\n    setNotification(prev => ({\n      ...prev,\n      open: false\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      component: \"h1\",\n      gutterBottom: true,\n      sx: {\n        color: 'white'\n      },\n      children: \"Create New NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 4,\n        borderRadius: 2,\n        background: 'rgba(22, 28, 36, 0.8)',\n        backdropFilter: 'blur(10px)'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"NFT Name\",\n              name: \"name\",\n              value: formData.name,\n              onChange: handleInputChange,\n              required: true,\n              InputProps: {\n                sx: {\n                  borderRadius: 2\n                }\n              },\n              sx: {\n                '& .MuiOutlinedInput-root': {\n                  '& fieldset': {\n                    borderColor: 'rgba(255, 255, 255, 0.2)'\n                  },\n                  '&:hover fieldset': {\n                    borderColor: 'rgba(255, 255, 255, 0.5)'\n                  }\n                },\n                '& .MuiInputLabel-root': {\n                  color: 'rgba(255, 255, 255, 0.7)'\n                },\n                '& .MuiInputBase-input': {\n                  color: 'white'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Description\",\n              name: \"description\",\n              value: formData.description,\n              onChange: handleInputChange,\n              multiline: true,\n              rows: 4,\n              required: true,\n              InputProps: {\n                sx: {\n                  borderRadius: 2\n                }\n              },\n              sx: {\n                '& .MuiOutlinedInput-root': {\n                  '& fieldset': {\n                    borderColor: 'rgba(255, 255, 255, 0.2)'\n                  },\n                  '&:hover fieldset': {\n                    borderColor: 'rgba(255, 255, 255, 0.5)'\n                  }\n                },\n                '& .MuiInputLabel-root': {\n                  color: 'rgba(255, 255, 255, 0.7)'\n                },\n                '& .MuiInputBase-input': {\n                  color: 'white'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Price (ETH)\",\n              name: \"price\",\n              type: \"number\",\n              value: formData.price,\n              onChange: handleInputChange,\n              required: true,\n              InputProps: {\n                sx: {\n                  borderRadius: 2\n                },\n                endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"end\",\n                  sx: {\n                    color: 'white'\n                  },\n                  children: \"ETH\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 33\n                }, this),\n                inputProps: {\n                  min: 0,\n                  step: 0.001\n                }\n              },\n              sx: {\n                '& .MuiOutlinedInput-root': {\n                  '& fieldset': {\n                    borderColor: 'rgba(255, 255, 255, 0.2)'\n                  },\n                  '&:hover fieldset': {\n                    borderColor: 'rgba(255, 255, 255, 0.5)'\n                  }\n                },\n                '& .MuiInputLabel-root': {\n                  color: 'rgba(255, 255, 255, 0.7)'\n                },\n                '& .MuiInputBase-input': {\n                  color: 'white'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              component: \"label\",\n              fullWidth: true,\n              sx: {\n                mb: 2,\n                p: 2,\n                borderRadius: 2,\n                borderColor: 'rgba(255, 255, 255, 0.3)',\n                color: 'white',\n                '&:hover': {\n                  borderColor: 'white'\n                }\n              },\n              children: [\"Upload Image\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                hidden: true,\n                accept: \"image/*\",\n                onChange: handleImageChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), formData.image && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              sx: {\n                color: 'rgba(255, 255, 255, 0.7)'\n              },\n              children: [\"Selected file: \", formData.image.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: previewUrl && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 1,\n                borderRadius: 2,\n                overflow: 'hidden',\n                height: '120px'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: previewUrl,\n                alt: \"NFT Preview\",\n                style: {\n                  width: '100%',\n                  height: '100%',\n                  objectFit: 'cover',\n                  borderRadius: '8px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sx: {\n              mt: 2\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              color: \"primary\",\n              fullWidth: true,\n              size: \"large\",\n              disabled: loading,\n              sx: {\n                borderRadius: 2,\n                p: 1.5,\n                background: 'linear-gradient(45deg, #6a1b9a 30%, #4527a0 90%)',\n                '&:hover': {\n                  background: 'linear-gradient(45deg, #7b1fa2 30%, #512da8 90%)'\n                }\n              },\n              children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 24,\n                color: \"inherit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 19\n              }, this) : 'Create NFT'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: notification.open,\n      autoHideDuration: 6000,\n      onClose: handleCloseNotification,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseNotification,\n        severity: notification.severity,\n        variant: \"filled\",\n        sx: {\n          width: '100%'\n        },\n        children: notification.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateNFT, \"rcIHQuUuSv6CrsLYHN1kEcO8D3Q=\", false, function () {\n  return [useNFTs, useAuth, useNavigate];\n});\n_c = CreateNFT;\nexport default CreateNFT;\nvar _c;\n$RefreshReg$(_c, \"CreateNFT\");","map":{"version":3,"names":["React","useState","Container","Typography","Box","TextField","Button","Paper","Grid","Alert","Snackbar","CircularProgress","InputAdornment","useNavigate","useNFTs","useAuth","jsxDEV","_jsxDEV","CreateNFT","_s","addNFT","user","navigate","formData","setFormData","name","description","price","image","previewUrl","setPreviewUrl","loading","setLoading","notification","setNotification","open","message","severity","handleInputChange","e","value","target","prev","handleImageChange","files","file","reader","FileReader","onloadend","result","readAsDataURL","handleSubmit","preventDefault","imageUrl","title","creator","email","isVerified","setTimeout","error","console","handleCloseNotification","maxWidth","sx","mt","children","variant","component","gutterBottom","color","fileName","_jsxFileName","lineNumber","columnNumber","p","borderRadius","background","backdropFilter","onSubmit","container","spacing","item","xs","fullWidth","label","onChange","required","InputProps","borderColor","multiline","rows","type","endAdornment","position","inputProps","min","step","sm","mb","hidden","accept","overflow","height","src","alt","style","width","objectFit","size","disabled","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","_c","$RefreshReg$"],"sources":["C:/Users/hardik/Documents/Nft/src/pages/CreateNFT.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  Paper,\r\n  Grid,\r\n  Alert,\r\n  Snackbar,\r\n  CircularProgress,\r\n  InputAdornment\r\n} from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useNFTs } from '../context/NFTContext';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nconst CreateNFT = () => {\r\n  const { addNFT } = useNFTs();\r\n  const { user } = useAuth();\r\n  const navigate = useNavigate();\r\n  \r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    price: '',\r\n    image: null as File | null,\r\n  });\r\n  \r\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [notification, setNotification] = useState<{\r\n    open: boolean;\r\n    message: string;\r\n    severity: 'success' | 'error';\r\n  }>({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success'\r\n  });\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const file = e.target.files[0];\r\n      setFormData((prev) => ({\r\n        ...prev,\r\n        image: file,\r\n      }));\r\n      \r\n      // Create a preview URL for the image\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setPreviewUrl(reader.result as string);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    \r\n    try {\r\n      // In a real application, you would upload the image to a storage service\r\n      // Here we're just creating a data URL to represent the image\r\n      const imageUrl = previewUrl || 'https://via.placeholder.com/400x400/3f51b5/ffffff';\r\n      \r\n      // Add the NFT to the context\r\n      addNFT({\r\n        title: formData.name,\r\n        description: formData.description,\r\n        price: `${formData.price} ETH`,\r\n        image: imageUrl,\r\n        creator: user?.email || 'anonymous',\r\n        isVerified: true\r\n      });\r\n      \r\n      // Show success notification\r\n      setNotification({\r\n        open: true,\r\n        message: 'NFT created successfully!',\r\n        severity: 'success'\r\n      });\r\n      \r\n      // Reset form\r\n      setFormData({\r\n        name: '',\r\n        description: '',\r\n        price: '',\r\n        image: null\r\n      });\r\n      setPreviewUrl(null);\r\n      \r\n      // Redirect to marketplace after a short delay\r\n      setTimeout(() => {\r\n        navigate('/marketplace');\r\n      }, 2000);\r\n    } catch (error) {\r\n      console.error('Error creating NFT:', error);\r\n      setNotification({\r\n        open: true,\r\n        message: 'Failed to create NFT. Please try again.',\r\n        severity: 'error'\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCloseNotification = () => {\r\n    setNotification(prev => ({ ...prev, open: false }));\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\" sx={{ mt: 4 }}>\r\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ color: 'white' }}>\r\n        Create New NFT\r\n      </Typography>\r\n      <Paper sx={{ p: 4, borderRadius: 2, background: 'rgba(22, 28, 36, 0.8)', backdropFilter: 'blur(10px)' }}>\r\n        <form onSubmit={handleSubmit}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"NFT Name\"\r\n                name=\"name\"\r\n                value={formData.name}\r\n                onChange={handleInputChange}\r\n                required\r\n                InputProps={{\r\n                  sx: { borderRadius: 2 }\r\n                }}\r\n                sx={{\r\n                  '& .MuiOutlinedInput-root': {\r\n                    '& fieldset': {\r\n                      borderColor: 'rgba(255, 255, 255, 0.2)',\r\n                    },\r\n                    '&:hover fieldset': {\r\n                      borderColor: 'rgba(255, 255, 255, 0.5)',\r\n                    },\r\n                  },\r\n                  '& .MuiInputLabel-root': {\r\n                    color: 'rgba(255, 255, 255, 0.7)'\r\n                  },\r\n                  '& .MuiInputBase-input': {\r\n                    color: 'white'\r\n                  }\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Description\"\r\n                name=\"description\"\r\n                value={formData.description}\r\n                onChange={handleInputChange}\r\n                multiline\r\n                rows={4}\r\n                required\r\n                InputProps={{\r\n                  sx: { borderRadius: 2 }\r\n                }}\r\n                sx={{\r\n                  '& .MuiOutlinedInput-root': {\r\n                    '& fieldset': {\r\n                      borderColor: 'rgba(255, 255, 255, 0.2)',\r\n                    },\r\n                    '&:hover fieldset': {\r\n                      borderColor: 'rgba(255, 255, 255, 0.5)',\r\n                    },\r\n                  },\r\n                  '& .MuiInputLabel-root': {\r\n                    color: 'rgba(255, 255, 255, 0.7)'\r\n                  },\r\n                  '& .MuiInputBase-input': {\r\n                    color: 'white'\r\n                  }\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Price (ETH)\"\r\n                name=\"price\"\r\n                type=\"number\"\r\n                value={formData.price}\r\n                onChange={handleInputChange}\r\n                required\r\n                InputProps={{\r\n                  sx: { borderRadius: 2 },\r\n                  endAdornment: <InputAdornment position=\"end\" sx={{ color: 'white' }}>ETH</InputAdornment>,\r\n                  inputProps: { min: 0, step: 0.001 }\r\n                }}\r\n                sx={{\r\n                  '& .MuiOutlinedInput-root': {\r\n                    '& fieldset': {\r\n                      borderColor: 'rgba(255, 255, 255, 0.2)',\r\n                    },\r\n                    '&:hover fieldset': {\r\n                      borderColor: 'rgba(255, 255, 255, 0.5)',\r\n                    },\r\n                  },\r\n                  '& .MuiInputLabel-root': {\r\n                    color: 'rgba(255, 255, 255, 0.7)'\r\n                  },\r\n                  '& .MuiInputBase-input': {\r\n                    color: 'white'\r\n                  }\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                component=\"label\"\r\n                fullWidth\r\n                sx={{ \r\n                  mb: 2, \r\n                  p: 2, \r\n                  borderRadius: 2,\r\n                  borderColor: 'rgba(255, 255, 255, 0.3)',\r\n                  color: 'white',\r\n                  '&:hover': {\r\n                    borderColor: 'white',\r\n                  }\r\n                }}\r\n              >\r\n                Upload Image\r\n                <input\r\n                  type=\"file\"\r\n                  hidden\r\n                  accept=\"image/*\"\r\n                  onChange={handleImageChange}\r\n                />\r\n              </Button>\r\n              {formData.image && (\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\r\n                  Selected file: {formData.image.name}\r\n                </Typography>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              {previewUrl && (\r\n                <Box sx={{ mt: 1, borderRadius: 2, overflow: 'hidden', height: '120px' }}>\r\n                  <img \r\n                    src={previewUrl} \r\n                    alt=\"NFT Preview\" \r\n                    style={{ \r\n                      width: '100%', \r\n                      height: '100%', \r\n                      objectFit: 'cover',\r\n                      borderRadius: '8px'\r\n                    }} \r\n                  />\r\n                </Box>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={12} sx={{ mt: 2 }}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                fullWidth\r\n                size=\"large\"\r\n                disabled={loading}\r\n                sx={{ \r\n                  borderRadius: 2, \r\n                  p: 1.5,\r\n                  background: 'linear-gradient(45deg, #6a1b9a 30%, #4527a0 90%)',\r\n                  '&:hover': {\r\n                    background: 'linear-gradient(45deg, #7b1fa2 30%, #512da8 90%)',\r\n                  }\r\n                }}\r\n              >\r\n                {loading ? (\r\n                  <CircularProgress size={24} color=\"inherit\" />\r\n                ) : (\r\n                  'Create NFT'\r\n                )}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n      \r\n      <Snackbar \r\n        open={notification.open} \r\n        autoHideDuration={6000} \r\n        onClose={handleCloseNotification}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\r\n      >\r\n        <Alert \r\n          onClose={handleCloseNotification} \r\n          severity={notification.severity}\r\n          variant=\"filled\"\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {notification.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CreateNFT; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}