{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hardik\\\\Documents\\\\Nft\\\\src\\\\context\\\\NFTContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Define the NFT interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTContext = /*#__PURE__*/createContext(undefined);\nexport const useNFTs = () => {\n  _s();\n  const context = useContext(NFTContext);\n  if (!context) {\n    throw new Error('useNFTs must be used within an NFTProvider');\n  }\n  return context;\n};\n_s(useNFTs, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NFTProvider = ({\n  children\n}) => {\n  _s2();\n  const [nfts, setNFTs] = useState([]);\n\n  // Load NFTs from localStorage on initial load\n  useEffect(() => {\n    const storedNFTs = localStorage.getItem('nfts');\n    if (storedNFTs) {\n      setNFTs(JSON.parse(storedNFTs));\n    }\n  }, []);\n\n  // Save NFTs to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('nfts', JSON.stringify(nfts));\n  }, [nfts]);\n\n  // Add a new NFT to the collection\n  const addNFT = nftData => {\n    const newNFT = {\n      ...nftData,\n      id: `nft-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      createdAt: Date.now(),\n      status: 'New'\n    };\n    setNFTs(prev => [newNFT, ...prev]);\n  };\n\n  // Get all NFTs created by a specific user\n  const getUserNFTs = email => {\n    return nfts.filter(nft => nft.creator === email);\n  };\n  const value = {\n    nfts,\n    addNFT,\n    getUserNFTs\n  };\n  return /*#__PURE__*/_jsxDEV(NFTContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s2(NFTProvider, \"fPu+IbilWJ4Ng0LChnz4HmLkV5I=\");\n_c = NFTProvider;\nexport default NFTContext;\nvar _c;\n$RefreshReg$(_c, \"NFTProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","NFTContext","undefined","useNFTs","_s","context","Error","NFTProvider","children","_s2","nfts","setNFTs","storedNFTs","localStorage","getItem","JSON","parse","setItem","stringify","addNFT","nftData","newNFT","id","Date","now","Math","random","toString","substr","createdAt","status","prev","getUserNFTs","email","filter","nft","creator","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hardik/Documents/Nft/src/context/NFTContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\n// Define the NFT interface\r\nexport interface NFT {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  price: string;\r\n  image: string;\r\n  creator: string;\r\n  createdAt: number;\r\n  status: string;\r\n  isVerified: boolean;\r\n}\r\n\r\ninterface NFTContextType {\r\n  nfts: NFT[];\r\n  addNFT: (nft: Omit<NFT, 'id' | 'createdAt' | 'status'>) => void;\r\n  getUserNFTs: (email: string) => NFT[];\r\n}\r\n\r\nconst NFTContext = createContext<NFTContextType | undefined>(undefined);\r\n\r\nexport const useNFTs = () => {\r\n  const context = useContext(NFTContext);\r\n  if (!context) {\r\n    throw new Error('useNFTs must be used within an NFTProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface NFTProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const NFTProvider: React.FC<NFTProviderProps> = ({ children }) => {\r\n  const [nfts, setNFTs] = useState<NFT[]>([]);\r\n  \r\n  // Load NFTs from localStorage on initial load\r\n  useEffect(() => {\r\n    const storedNFTs = localStorage.getItem('nfts');\r\n    if (storedNFTs) {\r\n      setNFTs(JSON.parse(storedNFTs));\r\n    }\r\n  }, []);\r\n  \r\n  // Save NFTs to localStorage whenever they change\r\n  useEffect(() => {\r\n    localStorage.setItem('nfts', JSON.stringify(nfts));\r\n  }, [nfts]);\r\n  \r\n  // Add a new NFT to the collection\r\n  const addNFT = (nftData: Omit<NFT, 'id' | 'createdAt' | 'status'>) => {\r\n    const newNFT: NFT = {\r\n      ...nftData,\r\n      id: `nft-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n      createdAt: Date.now(),\r\n      status: 'New',\r\n    };\r\n    \r\n    setNFTs(prev => [newNFT, ...prev]);\r\n  };\r\n  \r\n  // Get all NFTs created by a specific user\r\n  const getUserNFTs = (email: string) => {\r\n    return nfts.filter(nft => nft.creator === email);\r\n  };\r\n  \r\n  const value = {\r\n    nfts,\r\n    addNFT,\r\n    getUserNFTs\r\n  };\r\n  \r\n  return (\r\n    <NFTContext.Provider value={value}>\r\n      {children}\r\n    </NFTContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NFTContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;;AAExF;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAmBA,MAAMC,UAAU,gBAAGN,aAAa,CAA6BO,SAAS,CAAC;AAEvE,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACK,UAAU,CAAC;EACtC,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAYpB,OAAO,MAAMI,WAAuC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACvE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAQ,EAAE,CAAC;;EAE3C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMc,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACdD,OAAO,CAACI,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IACjC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAd,SAAS,CAAC,MAAM;IACde,YAAY,CAACI,OAAO,CAAC,MAAM,EAAEF,IAAI,CAACG,SAAS,CAACR,IAAI,CAAC,CAAC;EACpD,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMS,MAAM,GAAIC,OAAiD,IAAK;IACpE,MAAMC,MAAW,GAAG;MAClB,GAAGD,OAAO;MACVE,EAAE,EAAE,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;MAClEC,SAAS,EAAEN,IAAI,CAACC,GAAG,CAAC,CAAC;MACrBM,MAAM,EAAE;IACV,CAAC;IAEDnB,OAAO,CAACoB,IAAI,IAAI,CAACV,MAAM,EAAE,GAAGU,IAAI,CAAC,CAAC;EACpC,CAAC;;EAED;EACA,MAAMC,WAAW,GAAIC,KAAa,IAAK;IACrC,OAAOvB,IAAI,CAACwB,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,OAAO,KAAKH,KAAK,CAAC;EAClD,CAAC;EAED,MAAMI,KAAK,GAAG;IACZ3B,IAAI;IACJS,MAAM;IACNa;EACF,CAAC;EAED,oBACEhC,OAAA,CAACC,UAAU,CAACqC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA7B,QAAA,EAC/BA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B,CAAC;AAACjC,GAAA,CA5CWF,WAAuC;AAAAoC,EAAA,GAAvCpC,WAAuC;AA8CpD,eAAeN,UAAU;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}