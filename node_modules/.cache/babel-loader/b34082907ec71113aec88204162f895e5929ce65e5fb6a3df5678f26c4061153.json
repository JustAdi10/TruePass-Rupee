{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hardik\\\\Documents\\\\Nft\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n\n  // Check localStorage on initial load\n  useEffect(() => {\n    const storedAuth = localStorage.getItem('isAuthenticated');\n    const storedUser = localStorage.getItem('user');\n    if (storedAuth === 'true' && storedUser) {\n      setIsAuthenticated(true);\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n\n  // Login function - in a real app this would call your authentication API\n  const login = async (email, password) => {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Simple validation - would be done by your server in a real app\n    if (password.length < 6) {\n      throw new Error('Password must be at least 6 characters');\n    }\n\n    // Set auth state\n    setIsAuthenticated(true);\n    setUser({\n      email\n    });\n\n    // Store in localStorage (in a real app, you'd store tokens securely)\n    localStorage.setItem('isAuthenticated', 'true');\n    localStorage.setItem('user', JSON.stringify({\n      email\n    }));\n  };\n\n  // Logout function\n  const logout = () => {\n    setIsAuthenticated(false);\n    setUser(null);\n    localStorage.removeItem('isAuthenticated');\n    localStorage.removeItem('user');\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"Cix+uXOU60jwVTrRl9ss+REDA3M=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","storedAuth","localStorage","getItem","storedUser","JSON","parse","login","email","password","Promise","resolve","setTimeout","length","setItem","stringify","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hardik/Documents/Nft/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ninterface AuthContextType {\r\n  isAuthenticated: boolean;\r\n  user: { email: string } | null;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n  const [user, setUser] = useState<{ email: string } | null>(null);\r\n  \r\n  // Check localStorage on initial load\r\n  useEffect(() => {\r\n    const storedAuth = localStorage.getItem('isAuthenticated');\r\n    const storedUser = localStorage.getItem('user');\r\n    \r\n    if (storedAuth === 'true' && storedUser) {\r\n      setIsAuthenticated(true);\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n  }, []);\r\n  \r\n  // Login function - in a real app this would call your authentication API\r\n  const login = async (email: string, password: string): Promise<void> => {\r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Simple validation - would be done by your server in a real app\r\n    if (password.length < 6) {\r\n      throw new Error('Password must be at least 6 characters');\r\n    }\r\n    \r\n    // Set auth state\r\n    setIsAuthenticated(true);\r\n    setUser({ email });\r\n    \r\n    // Store in localStorage (in a real app, you'd store tokens securely)\r\n    localStorage.setItem('isAuthenticated', 'true');\r\n    localStorage.setItem('user', JSON.stringify({ email }));\r\n  };\r\n  \r\n  // Logout function\r\n  const logout = () => {\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n    localStorage.removeItem('isAuthenticated');\r\n    localStorage.removeItem('user');\r\n  };\r\n  \r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    login,\r\n    logout\r\n  };\r\n  \r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASzF,MAAMC,WAAW,gBAAGN,aAAa,CAA8BO,SAAS,CAAC;AAEzE,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAYpB,OAAO,MAAMI,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzE,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAU,KAAK,CAAC;EACtE,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAA2B,IAAI,CAAC;;EAEhE;EACAC,SAAS,CAAC,MAAM;IACd,MAAMgB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC1D,MAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAE/C,IAAIF,UAAU,KAAK,MAAM,IAAIG,UAAU,EAAE;MACvCN,kBAAkB,CAAC,IAAI,CAAC;MACxBE,OAAO,CAACK,IAAI,CAACC,KAAK,CAACF,UAAU,CAAC,CAAC;IACjC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAoB;IACtE;IACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;IAEvD;IACA,IAAIF,QAAQ,CAACI,MAAM,GAAG,CAAC,EAAE;MACvB,MAAM,IAAIpB,KAAK,CAAC,wCAAwC,CAAC;IAC3D;;IAEA;IACAK,kBAAkB,CAAC,IAAI,CAAC;IACxBE,OAAO,CAAC;MAAEQ;IAAM,CAAC,CAAC;;IAElB;IACAN,YAAY,CAACY,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC;IAC/CZ,YAAY,CAACY,OAAO,CAAC,MAAM,EAAET,IAAI,CAACU,SAAS,CAAC;MAAEP;IAAM,CAAC,CAAC,CAAC;EACzD,CAAC;;EAED;EACA,MAAMQ,MAAM,GAAGA,CAAA,KAAM;IACnBlB,kBAAkB,CAAC,KAAK,CAAC;IACzBE,OAAO,CAAC,IAAI,CAAC;IACbE,YAAY,CAACe,UAAU,CAAC,iBAAiB,CAAC;IAC1Cf,YAAY,CAACe,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED,MAAMC,KAAK,GAAG;IACZrB,eAAe;IACfE,IAAI;IACJQ,KAAK;IACLS;EACF,CAAC;EAED,oBACE7B,OAAA,CAACC,WAAW,CAAC+B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAvB,QAAA,EAChCA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC3B,GAAA,CAtDWF,YAAyC;AAAA8B,EAAA,GAAzC9B,YAAyC;AAwDtD,eAAeN,WAAW;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}