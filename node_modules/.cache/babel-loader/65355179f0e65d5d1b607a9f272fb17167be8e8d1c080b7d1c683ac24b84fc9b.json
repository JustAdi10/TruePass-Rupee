{"ast":null,"code":"var _jsxFileName = \"/home/aditya/Desktop/Repos/opeansea_clone/src/context/CartContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Define the cart item type\n\n// Define the context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create context with default values\nconst CartContext = /*#__PURE__*/createContext({\n  cartItems: [],\n  addToCart: () => {},\n  removeFromCart: () => {},\n  updateQuantity: () => {},\n  clearCart: () => {},\n  cartItemCount: 0\n});\n\n// Create provider component\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([\n  // Sample initial items\n  {\n    id: 1,\n    title: 'Abstract Thought of Art',\n    creator: 'ZafGod.eth',\n    price: '0.00069',\n    image: 'https://via.placeholder.com/400x400/1a237e/ffffff',\n    quantity: 1\n  }, {\n    id: 2,\n    title: 'Harvested Opulence',\n    creator: 'Fame Identity',\n    price: '0.005',\n    image: 'https://via.placeholder.com/400x400/4a148c/ffffff',\n    quantity: 1\n  }]);\n\n  // Calculate total number of items in cart\n  const cartItemCount = cartItems.reduce((total, item) => total + item.quantity, 0);\n\n  // Add item to cart\n  const addToCart = item => {\n    setCartItems(prevItems => {\n      // Check if item already exists in cart\n      const existingItem = prevItems.find(cartItem => cartItem.id === item.id);\n      if (existingItem) {\n        // Increment quantity if item exists\n        return prevItems.map(cartItem => cartItem.id === item.id ? {\n          ...cartItem,\n          quantity: cartItem.quantity + 1\n        } : cartItem);\n      } else {\n        // Add new item with quantity 1\n        return [...prevItems, {\n          ...item,\n          quantity: 1\n        }];\n      }\n    });\n  };\n\n  // Remove item from cart\n  const removeFromCart = id => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== id));\n  };\n\n  // Update item quantity\n  const updateQuantity = (id, change) => {\n    setCartItems(prevItems => prevItems.map(item => {\n      if (item.id === id) {\n        const newQuantity = Math.max(1, item.quantity + change);\n        return {\n          ...item,\n          quantity: newQuantity\n        };\n      }\n      return item;\n    }));\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    setCartItems([]);\n  };\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    cartItemCount\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use the cart context\n_s(CartProvider, \"sGrQGWl0X6Q+V46dE+rDSKUAWvc=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","CartContext","cartItems","addToCart","removeFromCart","updateQuantity","clearCart","cartItemCount","CartProvider","children","_s","setCartItems","id","title","creator","price","image","quantity","reduce","total","item","prevItems","existingItem","find","cartItem","map","filter","change","newQuantity","Math","max","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["/home/aditya/Desktop/Repos/opeansea_clone/src/context/CartContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\n\n// Define the cart item type\nexport interface CartItem {\n  id: number;\n  title: string;\n  creator: string;\n  price: string;\n  image: string;\n  quantity: number;\n}\n\n// Define the context type\ninterface CartContextType {\n  cartItems: CartItem[];\n  addToCart: (item: Omit<CartItem, 'quantity'>) => void;\n  removeFromCart: (id: number) => void;\n  updateQuantity: (id: number, change: number) => void;\n  clearCart: () => void;\n  cartItemCount: number;\n}\n\n// Create context with default values\nconst CartContext = createContext<CartContextType>({\n  cartItems: [],\n  addToCart: () => {},\n  removeFromCart: () => {},\n  updateQuantity: () => {},\n  clearCart: () => {},\n  cartItemCount: 0,\n});\n\n// Create provider component\nexport const CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [cartItems, setCartItems] = useState<CartItem[]>([\n    // Sample initial items\n    {\n      id: 1,\n      title: 'Abstract Thought of Art',\n      creator: 'ZafGod.eth',\n      price: '0.00069',\n      image: 'https://via.placeholder.com/400x400/1a237e/ffffff',\n      quantity: 1,\n    },\n    {\n      id: 2,\n      title: 'Harvested Opulence',\n      creator: 'Fame Identity',\n      price: '0.005',\n      image: 'https://via.placeholder.com/400x400/4a148c/ffffff',\n      quantity: 1,\n    },\n  ]);\n\n  // Calculate total number of items in cart\n  const cartItemCount = cartItems.reduce((total, item) => total + item.quantity, 0);\n\n  // Add item to cart\n  const addToCart = (item: Omit<CartItem, 'quantity'>) => {\n    setCartItems(prevItems => {\n      // Check if item already exists in cart\n      const existingItem = prevItems.find(cartItem => cartItem.id === item.id);\n      \n      if (existingItem) {\n        // Increment quantity if item exists\n        return prevItems.map(cartItem => \n          cartItem.id === item.id \n            ? { ...cartItem, quantity: cartItem.quantity + 1 } \n            : cartItem\n        );\n      } else {\n        // Add new item with quantity 1\n        return [...prevItems, { ...item, quantity: 1 }];\n      }\n    });\n  };\n\n  // Remove item from cart\n  const removeFromCart = (id: number) => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== id));\n  };\n\n  // Update item quantity\n  const updateQuantity = (id: number, change: number) => {\n    setCartItems(prevItems => \n      prevItems.map(item => {\n        if (item.id === id) {\n          const newQuantity = Math.max(1, item.quantity + change);\n          return { ...item, quantity: newQuantity };\n        }\n        return item;\n      })\n    );\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    cartItemCount,\n  };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n\n// Custom hook to use the cart context\nexport const useCart = () => useContext(CartContext); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}