{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';// Define the cart item type\n// Define the context type\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create context with default values\nconst CartContext=/*#__PURE__*/createContext({cartItems:[],addToCart:()=>{},removeFromCart:()=>{},updateQuantity:()=>{},clearCart:()=>{},cartItemCount:0});// Create provider component\nexport const CartProvider=_ref=>{let{children}=_ref;const[cartItems,setCartItems]=useState([// Sample initial items\n{id:1,title:'Abstract Thought of Art',creator:'ZafGod.eth',price:'0.00069',image:'https://via.placeholder.com/400x400/1a237e/ffffff',quantity:1},{id:2,title:'Harvested Opulence',creator:'Fame Identity',price:'0.005',image:'https://via.placeholder.com/400x400/4a148c/ffffff',quantity:1}]);// Calculate total number of items in cart\nconst cartItemCount=cartItems.reduce((total,item)=>total+item.quantity,0);// Add item to cart\nconst addToCart=item=>{setCartItems(prevItems=>{// Check if item already exists in cart\nconst existingItem=prevItems.find(cartItem=>cartItem.id===item.id);if(existingItem){// Increment quantity if item exists\nreturn prevItems.map(cartItem=>cartItem.id===item.id?{...cartItem,quantity:cartItem.quantity+1}:cartItem);}else{// Add new item with quantity 1\nreturn[...prevItems,{...item,quantity:1}];}});};// Remove item from cart\nconst removeFromCart=id=>{setCartItems(prevItems=>prevItems.filter(item=>item.id!==id));};// Update item quantity\nconst updateQuantity=(id,change)=>{setCartItems(prevItems=>prevItems.map(item=>{if(item.id===id){const newQuantity=Math.max(1,item.quantity+change);return{...item,quantity:newQuantity};}return item;}));};// Clear cart\nconst clearCart=()=>{setCartItems([]);};const value={cartItems,addToCart,removeFromCart,updateQuantity,clearCart,cartItemCount};return/*#__PURE__*/_jsx(CartContext.Provider,{value:value,children:children});};// Custom hook to use the cart context\nexport const useCart=()=>useContext(CartContext);","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","CartContext","cartItems","addToCart","removeFromCart","updateQuantity","clearCart","cartItemCount","CartProvider","_ref","children","setCartItems","id","title","creator","price","image","quantity","reduce","total","item","prevItems","existingItem","find","cartItem","map","filter","change","newQuantity","Math","max","value","Provider","useCart"],"sources":["C:/Users/hardik/Documents/Nft/src/context/CartContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\n// Define the cart item type\r\nexport interface CartItem {\r\n  id: number;\r\n  title: string;\r\n  creator: string;\r\n  price: string;\r\n  image: string;\r\n  quantity: number;\r\n}\r\n\r\n// Define the context type\r\ninterface CartContextType {\r\n  cartItems: CartItem[];\r\n  addToCart: (item: Omit<CartItem, 'quantity'>) => void;\r\n  removeFromCart: (id: number) => void;\r\n  updateQuantity: (id: number, change: number) => void;\r\n  clearCart: () => void;\r\n  cartItemCount: number;\r\n}\r\n\r\n// Create context with default values\r\nconst CartContext = createContext<CartContextType>({\r\n  cartItems: [],\r\n  addToCart: () => {},\r\n  removeFromCart: () => {},\r\n  updateQuantity: () => {},\r\n  clearCart: () => {},\r\n  cartItemCount: 0,\r\n});\r\n\r\n// Create provider component\r\nexport const CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState<CartItem[]>([\r\n    // Sample initial items\r\n    {\r\n      id: 1,\r\n      title: 'Abstract Thought of Art',\r\n      creator: 'ZafGod.eth',\r\n      price: '0.00069',\r\n      image: 'https://via.placeholder.com/400x400/1a237e/ffffff',\r\n      quantity: 1,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Harvested Opulence',\r\n      creator: 'Fame Identity',\r\n      price: '0.005',\r\n      image: 'https://via.placeholder.com/400x400/4a148c/ffffff',\r\n      quantity: 1,\r\n    },\r\n  ]);\r\n\r\n  // Calculate total number of items in cart\r\n  const cartItemCount = cartItems.reduce((total, item) => total + item.quantity, 0);\r\n\r\n  // Add item to cart\r\n  const addToCart = (item: Omit<CartItem, 'quantity'>) => {\r\n    setCartItems(prevItems => {\r\n      // Check if item already exists in cart\r\n      const existingItem = prevItems.find(cartItem => cartItem.id === item.id);\r\n      \r\n      if (existingItem) {\r\n        // Increment quantity if item exists\r\n        return prevItems.map(cartItem => \r\n          cartItem.id === item.id \r\n            ? { ...cartItem, quantity: cartItem.quantity + 1 } \r\n            : cartItem\r\n        );\r\n      } else {\r\n        // Add new item with quantity 1\r\n        return [...prevItems, { ...item, quantity: 1 }];\r\n      }\r\n    });\r\n  };\r\n\r\n  // Remove item from cart\r\n  const removeFromCart = (id: number) => {\r\n    setCartItems(prevItems => prevItems.filter(item => item.id !== id));\r\n  };\r\n\r\n  // Update item quantity\r\n  const updateQuantity = (id: number, change: number) => {\r\n    setCartItems(prevItems => \r\n      prevItems.map(item => {\r\n        if (item.id === id) {\r\n          const newQuantity = Math.max(1, item.quantity + change);\r\n          return { ...item, quantity: newQuantity };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  // Clear cart\r\n  const clearCart = () => {\r\n    setCartItems([]);\r\n  };\r\n\r\n  const value = {\r\n    cartItems,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    cartItemCount,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n};\r\n\r\n// Custom hook to use the cart context\r\nexport const useCart = () => useContext(CartContext); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}