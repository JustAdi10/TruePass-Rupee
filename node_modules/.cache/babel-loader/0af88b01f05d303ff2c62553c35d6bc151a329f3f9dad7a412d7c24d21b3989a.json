{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hardik\\\\Documents\\\\HackathonTp\\\\TruePass\\\\src\\\\context\\\\CartContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Define the cart item type\n\n// Define the context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create context with default values\nconst CartContext = /*#__PURE__*/createContext({\n  cartItems: [],\n  addToCart: () => {},\n  removeFromCart: () => {},\n  updateQuantity: () => {},\n  clearCart: () => {},\n  cartItemCount: 0\n});\n\n// Create provider component\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize with empty cart\n  const [cartItems, setCartItems] = useState([]);\n\n  // Load cart items from localStorage on initial load\n  useEffect(() => {\n    const storedCartItems = localStorage.getItem('cartItems');\n    if (storedCartItems) {\n      try {\n        setCartItems(JSON.parse(storedCartItems));\n      } catch (error) {\n        console.error('Failed to parse cart items from localStorage:', error);\n        setCartItems([]);\n      }\n    }\n  }, []);\n\n  // Save cart items to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  // Calculate total number of items in cart\n  const cartItemCount = cartItems.reduce((total, item) => total + item.quantity, 0);\n\n  // Add item to cart\n  const addToCart = item => {\n    setCartItems(prevItems => {\n      // Check if item already exists in cart\n      const existingItem = prevItems.find(cartItem => cartItem.id === item.id);\n      if (existingItem) {\n        // Increment quantity if item exists\n        return prevItems.map(cartItem => cartItem.id === item.id ? {\n          ...cartItem,\n          quantity: cartItem.quantity + 1\n        } : cartItem);\n      } else {\n        // Add new item with quantity 1\n        return [...prevItems, {\n          ...item,\n          quantity: 1\n        }];\n      }\n    });\n  };\n\n  // Remove item from cart\n  const removeFromCart = id => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== id));\n  };\n\n  // Update item quantity\n  const updateQuantity = (id, change) => {\n    setCartItems(prevItems => prevItems.map(item => {\n      if (item.id === id) {\n        const newQuantity = Math.max(1, item.quantity + change);\n        return {\n          ...item,\n          quantity: newQuantity\n        };\n      }\n      return item;\n    }));\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    setCartItems([]);\n    localStorage.removeItem('cartItems');\n  };\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    cartItemCount\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use the cart context\n_s(CartProvider, \"jdONvkEabzLc64SbXgqXBHRMg9M=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","cartItems","addToCart","removeFromCart","updateQuantity","clearCart","cartItemCount","CartProvider","children","_s","setCartItems","storedCartItems","localStorage","getItem","JSON","parse","error","console","setItem","stringify","reduce","total","item","quantity","prevItems","existingItem","find","cartItem","id","map","filter","change","newQuantity","Math","max","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["C:/Users/hardik/Documents/HackathonTp/TruePass/src/context/CartContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\r\n\r\n// Define the cart item type\r\nexport interface CartItem {\r\n  id: number | string;\r\n  title: string;\r\n  creator: string;\r\n  price: string;\r\n  image: string;\r\n  quantity: number;\r\n}\r\n\r\n// Define the context type\r\ninterface CartContextType {\r\n  cartItems: CartItem[];\r\n  addToCart: (item: Omit<CartItem, 'quantity'>) => void;\r\n  removeFromCart: (id: number | string) => void;\r\n  updateQuantity: (id: number | string, change: number) => void;\r\n  clearCart: () => void;\r\n  cartItemCount: number;\r\n}\r\n\r\n// Create context with default values\r\nconst CartContext = createContext<CartContextType>({\r\n  cartItems: [],\r\n  addToCart: () => {},\r\n  removeFromCart: () => {},\r\n  updateQuantity: () => {},\r\n  clearCart: () => {},\r\n  cartItemCount: 0,\r\n});\r\n\r\n// Create provider component\r\nexport const CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  // Initialize with empty cart\r\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\r\n\r\n  // Load cart items from localStorage on initial load\r\n  useEffect(() => {\r\n    const storedCartItems = localStorage.getItem('cartItems');\r\n    if (storedCartItems) {\r\n      try {\r\n        setCartItems(JSON.parse(storedCartItems));\r\n      } catch (error) {\r\n        console.error('Failed to parse cart items from localStorage:', error);\r\n        setCartItems([]);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save cart items to localStorage whenever they change\r\n  useEffect(() => {\r\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n  }, [cartItems]);\r\n\r\n  // Calculate total number of items in cart\r\n  const cartItemCount = cartItems.reduce((total, item) => total + item.quantity, 0);\r\n\r\n  // Add item to cart\r\n  const addToCart = (item: Omit<CartItem, 'quantity'>) => {\r\n    setCartItems(prevItems => {\r\n      // Check if item already exists in cart\r\n      const existingItem = prevItems.find(cartItem => cartItem.id === item.id);\r\n      \r\n      if (existingItem) {\r\n        // Increment quantity if item exists\r\n        return prevItems.map(cartItem => \r\n          cartItem.id === item.id \r\n            ? { ...cartItem, quantity: cartItem.quantity + 1 } \r\n            : cartItem\r\n        );\r\n      } else {\r\n        // Add new item with quantity 1\r\n        return [...prevItems, { ...item, quantity: 1 }];\r\n      }\r\n    });\r\n  };\r\n\r\n  // Remove item from cart\r\n  const removeFromCart = (id: number | string) => {\r\n    setCartItems(prevItems => prevItems.filter(item => item.id !== id));\r\n  };\r\n\r\n  // Update item quantity\r\n  const updateQuantity = (id: number | string, change: number) => {\r\n    setCartItems(prevItems => \r\n      prevItems.map(item => {\r\n        if (item.id === id) {\r\n          const newQuantity = Math.max(1, item.quantity + change);\r\n          return { ...item, quantity: newQuantity };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  // Clear cart\r\n  const clearCart = () => {\r\n    setCartItems([]);\r\n    localStorage.removeItem('cartItems');\r\n  };\r\n\r\n  const value = {\r\n    cartItems,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    cartItemCount,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n};\r\n\r\n// Custom hook to use the cart context\r\nexport const useCart = () => useContext(CartContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}